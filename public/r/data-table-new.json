{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "bellhop-datatable",
  "type": "registry:block",
  "author": "Actabl Design",
  "description": "A data table component for the Bellhop application with sorting, filtering, and pagination.",
  "categories": ["table", "data", "display"],
  "dependencies": [
    "lucide-react",
    "@heroicons/react/16/solid",
    "@tanstack/react-table",
    "sonner"
  ],
  "registryDependencies": [
    "button",
    "checkbox",
    "dropdown-menu",
    "input",
    "table",
    "badge"
  ],
  "files": [
    {
      "path": "blocks/bellhop-datatable/index.tsx",
      "content": "import { TaskDataTable } from \"./components/task-datatable\"\nimport { columns } from \"./components/columns\"\n\nconst data = [\n  {\n    id: \"Task-5101\",\n    taskName: \"Finalize Q3 report\",\n    status: \"Pending\",\n    dueDate: \"2024-08-01\",\n    assignedTo: \"Alice\",\n    priority: \"High\",\n  },\n  {\n    id: \"Task-5102\",\n    taskName: \"Client follow-up call\",\n    status: \"In Progress\",\n    dueDate: \"2024-07-29\",\n    assignedTo: \"Bob\",\n    priority: \"Medium\",\n  },\n  {\n    id: \"Task-5103\",\n    taskName: \"Update website copy\",\n    status: \"Done\",\n    dueDate: \"2024-07-22\",\n    assignedTo: \"Charlie\",\n    priority: \"Low\",\n  },\n  {\n    id: \"Task-5104\",\n    taskName: \"Prepare presentation slides\",\n    status: \"Pending\",\n    dueDate: \"2024-08-05\",\n    assignedTo: \"Alice\",\n    priority: \"High\",\n  },\n  {\n    id: \"Task-5105\",\n    taskName: \"System maintenance check\",\n    status: \"In Progress\",\n    dueDate: \"2024-07-30\",\n    assignedTo: \"David\",\n    priority: \"Medium\",\n  }\n];\n\nexport default function DataTableBlock() {\n  return (\n    <div className=\"p-6 space-y-4\">\n      <div>\n        <h1 className=\"text-xl font-semibold\">Tasks</h1>\n        <p className=\"text-sm text-muted-foreground\">Manage your daily tasks and priorities</p>\n      </div>\n      <TaskDataTable data={data} columns={columns} />\n    </div>\n  )\n}",
      "type": "registry:page",
      "target": "app/components/data-table/page.tsx"
    },
    {
      "path": "blocks/bellhop-datatable/components/task-datatable.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport {\n  ColumnDef,\n  ColumnFiltersState,\n  SortingState,\n  VisibilityState,\n  flexRender,\n  getCoreRowModel,\n  getFilteredRowModel,\n  getPaginationRowModel,\n  getSortedRowModel,\n  useReactTable,\n} from \"@tanstack/react-table\";\nimport { ArrowPathIcon, EllipsisHorizontalIcon, PlusIcon, PrinterIcon } from '@heroicons/react/16/solid';\nimport { ArrowUpDown, ChevronDown } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuCheckboxItem,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { toast } from \"sonner\";\n\ninterface TaskDataTableProps<TData, TValue> {\n  columns: ColumnDef<TData, TValue>[]\n  data: TData[]\n}\n\nexport function TaskDataTable<TData, TValue>({\n  columns,\n  data,\n}: TaskDataTableProps<TData, TValue>) {\n  const [sorting, setSorting] = React.useState<SortingState>([]);\n  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(\n    []\n  );\n  const [columnVisibility, setColumnVisibility] =\n    React.useState<VisibilityState>({});\n  const [rowSelection, setRowSelection] = React.useState({});\n\n  const table = useReactTable({\n    data,\n    columns,\n    onSortingChange: setSorting,\n    onColumnFiltersChange: setColumnFilters,\n    getCoreRowModel: getCoreRowModel(),\n    getPaginationRowModel: getPaginationRowModel(),\n    getSortedRowModel: getSortedRowModel(),\n    getFilteredRowModel: getFilteredRowModel(),\n    onColumnVisibilityChange: setColumnVisibility,\n    onRowSelectionChange: setRowSelection,\n    state: {\n      sorting,\n      columnFilters,\n      columnVisibility,\n      rowSelection,\n    },\n  });\n\n  return (\n    <div className=\"w-full\">\n      <div className=\"flex items-center pt-1 pb-4 gap-2\">\n        <Button\n          variant=\"default\"\n          size=\"sm\"\n          startIcon={<PlusIcon className=\"h-4 w-4\" />}\n          onClick={() => toast.success(\"Task has been created\")}\n        >\n          Create Task\n        </Button>\n        <Input\n          placeholder=\"Search task...\"\n          value={(table.getColumn(\"taskName\")?.getFilterValue() as string) ?? \"\"}\n          onChange={(event) =>\n            table.getColumn(\"taskName\")?.setFilterValue(event.target.value)\n          }\n          className=\"ml-auto max-w-xs\"\n        />\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"outline\" size=\"sm\" className=\"\">\n              Columns <ChevronDown className=\"h-4 w-4 ml-1\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            {table\n              .getAllColumns()\n              .filter((column) => column.getCanHide())\n              .map((column) => {\n                return (\n                  <DropdownMenuCheckboxItem\n                    key={column.id}\n                    className=\"capitalize\"\n                    checked={column.getIsVisible()}\n                    onCheckedChange={(value) =>\n                      column.toggleVisibility(!!value)\n                    }\n                  >\n                    {column.id}\n                  </DropdownMenuCheckboxItem>\n                );\n              })}\n          </DropdownMenuContent>\n        </DropdownMenu>\n        <div className=\"flex space-x-1\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            className=\"h-8 w-8\"\n          >\n            <ArrowPathIcon className=\"h-4 w-4\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            className=\"h-8 w-8\"\n          >\n            <PrinterIcon className=\"h-4 w-4\" />\n          </Button>\n\n          <Button\n            variant=\"ghost\"\n            size=\"icon-sm\"\n            className=\"h-8 w-8\"\n          >\n            <EllipsisHorizontalIcon className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      <div className=\"rounded-md border\">\n        <Table>\n          <TableHeader>\n            {table.getHeaderGroups().map((headerGroup) => (\n              <TableRow key={headerGroup.id}>\n                {headerGroup.headers.map((header) => {\n                  return (\n                    <TableHead key={header.id} className=\"[&:has([role=checkbox])]:pl-4\">\n                      {header.isPlaceholder\n                        ? null\n                        : flexRender(\n                            header.column.columnDef.header,\n                            header.getContext()\n                          )}\n                    </TableHead>\n                  );\n                })}\n              </TableRow>\n            ))}\n          </TableHeader>\n          <TableBody>\n            {table.getRowModel().rows?.length ? (\n              table.getRowModel().rows.map((row) => (\n                <TableRow\n                  key={row.id}\n                  data-state={row.getIsSelected() && \"selected\"}\n                >\n                  {row.getVisibleCells().map((cell) => (\n                    <TableCell\n                      key={cell.id}\n                      className=\"[&:has([role=checkbox])]:pl-4\"\n                    >\n                      {flexRender(\n                        cell.column.columnDef.cell,\n                        cell.getContext()\n                      )}\n                    </TableCell>\n                  ))}\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell\n                  colSpan={columns.length}\n                  className=\"h-24 text-center\"\n                >\n                  No results.\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n      <div className=\"flex items-center justify-end space-x-2 py-4\">\n        <div className=\"flex-1 text-sm text-muted-foreground\">\n          {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\n          {table.getFilteredRowModel().rows.length} row(s) selected.\n        </div>\n        <div className=\"space-x-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.previousPage()}\n            disabled={!table.getCanPreviousPage()}\n          >\n            Previous\n          </Button>\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => table.nextPage()}\n            disabled={!table.getCanNextPage()}\n          >\n            Next\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}",
      "type": "registry:component",
      "target": "components/task-datatable.tsx"
    },
    {
      "path": "blocks/bellhop-datatable/components/columns.tsx",
      "content": "\"use client\";\n\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { MoreHorizontal } from \"lucide-react\";\nimport { ChevronUpDownIcon } from '@heroicons/react/16/solid';\n\nexport type Task = {\n  id: string;\n  taskName: string;\n  status: \"Pending\" | \"In Progress\" | \"Done\";\n  dueDate: string;\n  assignedTo: string;\n  priority: \"Low\" | \"Medium\" | \"High\";\n};\n\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"taskName\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n          Task\n          <ChevronUpDownIcon className=\"h-4 w-4 ml-1\"/>\n        </Button>\n      );\n    },\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"taskName\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => {\n      const status = row.getValue(\"status\") as Task[\"status\"];\n      let color: string;\n      if (status === \"Pending\") color = \"yellow\";\n      else if (status === \"In Progress\") color = \"blue\";\n      else color = \"green\";\n      \n      return (\n        <Badge variant=\"outline\" className={`text-${color}-800 border-${color}-300 bg-${color}-50`}>\n          {status}\n        </Badge>\n      );\n    },\n  },\n  {\n    accessorKey: \"dueDate\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n          Due Date\n          <ChevronUpDownIcon className=\"h-4 w-4 ml-1\"/>\n        </Button>\n      );\n    },\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"dueDate\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"assignedTo\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n        Assigned To\n        <ChevronUpDownIcon className=\"h-4 w-4 ml-1\"/>\n      </Button>\n      );\n    },\n    cell: ({ row }) => <div>{row.getValue(\"assignedTo\")}</div>,\n  },\n  {\n    accessorKey: \"priority\",\n    header: \"Priority\",\n    cell: ({ row }) => {\n      const priority = row.getValue(\"priority\") as Task[\"priority\"];\n      let color: string;\n      if (priority === \"High\") color = \"red\";\n      else if (priority === \"Medium\") color = \"orange\";\n      else color = \"green\";\n      \n      return (\n        <Badge variant=\"solid\" className={`bg-${color}-200 text-${color}-800`}>\n          {priority}\n        </Badge>\n      );\n    },\n  },\n  {\n    id: \"actions\",\n    enableHiding: false,\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal className=\"h-4 w-4\" />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(task.id)}\n            >\n              Copy task ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View project</DropdownMenuItem>\n            <DropdownMenuItem>View details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  },\n];",
      "type": "registry:component",
      "target": "components/columns.tsx"
    },
    {
      "path": "blocks/bellhop-datatable/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": "lib/utils.ts"
    }
  ]
}