{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "columns",
  "type": "registry:component",
  "title": "Columns Configuration",
  "author": "Actabl Design",
  "description": "A configuration for table columns, including sorting, filtering, and actions.",
  "dependencies": [
    "@tanstack/react-table",
    "lucide-react",
    "@heroicons/react",
    "@tanstack/react-table",
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot",
    "@radix-ui/react-checkbox",
    "@radix-ui/react-dropdown-menu",
    "@heroicons/react"
  ],
  "registryDependencies": [
    "http://localhost:3000/r/badge.json",
    "http://localhost:3000/r/button.json",
    "checkbox",
    "dropdown-menu"
  ],
  "files": [
    {
      "path": "src/components/columns.tsx",
      "content": "\"use client\";\n\nimport { ColumnDef } from \"@tanstack/react-table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { ArrowUpDown, MoreHorizontal } from \"lucide-react\";\nimport { ChevronUpDownIcon } from '@heroicons/react/16/solid';\n\nexport type Task = {\n  id: string;\n  taskName: string;\n  status: \"Pending\" | \"In Progress\" | \"Done\";\n  dueDate: string;\n  assignedTo: string;\n  priority: \"Low\" | \"Medium\" | \"High\";\n};\n\nexport const columns: ColumnDef<Task>[] = [\n  {\n    id: \"select\",\n    header: ({ table }) => (\n      <Checkbox\n        checked={\n          table.getIsAllPageRowsSelected() ||\n          (table.getIsSomePageRowsSelected() && \"indeterminate\")\n        }\n        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}\n        aria-label=\"Select all\"\n      />\n    ),\n    cell: ({ row }) => (\n      <Checkbox\n        checked={row.getIsSelected()}\n        onCheckedChange={(value) => row.toggleSelected(!!value)}\n        aria-label=\"Select row\"\n      />\n    ),\n    enableSorting: false,\n    enableHiding: false,\n  },\n  {\n    accessorKey: \"taskName\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n          Task\n          <ChevronUpDownIcon className=\"size-4\"/>\n        </Button>\n      );\n    },\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"taskName\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"status\",\n    header: \"Status\",\n    cell: ({ row }) => {\n      const status = row.getValue(\"status\") as Task[\"status\"];\n      let badgeColor: \"yellow\" | \"blue\" | \"green\" | \"neutral\" = \"neutral\";\n      if (status === \"Pending\") badgeColor = \"yellow\";\n      else if (status === \"In Progress\") badgeColor = \"blue\";\n      else if (status === \"Done\") badgeColor = \"green\";\n      return (\n        <Badge variant=\"outline\" color={badgeColor}>\n          {status}\n        </Badge>\n      );\n    },\n  },\n  {\n    accessorKey: \"dueDate\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n          Due Date\n          <ChevronUpDownIcon className=\"size-4\"/>\n        </Button>\n      );\n    },\n    cell: ({ row }) => (\n      <div className=\"capitalize\">{row.getValue(\"dueDate\")}</div>\n    ),\n  },\n  {\n    accessorKey: \"assignedTo\",\n    header: ({ column }) => {\n      return (\n        <Button\n          variant=\"ghost\"\n          className=\"font-semibold text-neutral-700 hover:text-neutral-800 p-1 h-8 focus:ring-0\"\n          onClick={() =>\n            column.toggleSorting(column.getIsSorted() === \"asc\")\n          }\n        >\n        Assigned To\n        <ChevronUpDownIcon className=\"size-4\"/>\n      </Button>\n      );\n    },\n    cell: ({ row }) => <div>{row.getValue(\"assignedTo\")}</div>,\n  },\n  {\n    accessorKey: \"priority\",\n    header: \"Priority\",\n    cell: ({ row }) => {\n      const priority = row.getValue(\"priority\") as Task[\"priority\"];\n      let badgeColor: \"red\" | \"orange\" | \"green\" = \"green\";\n      if (priority === \"High\") badgeColor = \"red\";\n      else if (priority === \"Medium\") badgeColor = \"orange\";\n      return (\n        <Badge variant=\"solid\" color={badgeColor}>\n          {priority}\n        </Badge>\n      );\n    },\n  },\n  {\n    id: \"actions\",\n    enableHiding: false,\n    cell: ({ row }) => {\n      const task = row.original;\n\n      return (\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <Button variant=\"ghost\" className=\"h-8 w-8 p-0\">\n              <span className=\"sr-only\">Open menu</span>\n              <MoreHorizontal />\n            </Button>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent align=\"end\">\n            <DropdownMenuLabel>Actions</DropdownMenuLabel>\n            <DropdownMenuItem\n              onClick={() => navigator.clipboard.writeText(task.id)}\n            >\n              Copy task ID\n            </DropdownMenuItem>\n            <DropdownMenuSeparator />\n            <DropdownMenuItem>View project</DropdownMenuItem>\n            <DropdownMenuItem>View details</DropdownMenuItem>\n          </DropdownMenuContent>\n        </DropdownMenu>\n      );\n    },\n  },\n];",
      "type": "registry:component",
      "target": "~/components/columns.tsx"
    },
    {
      "path": "src/components/ui/badge.tsx",
      "content": "\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { createContext, useContext } from \"react\";\n\nimport { X } from \"lucide-react\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst BadgeContext = createContext<{ size: \"sm\" | \"md\" }>({ size: \"sm\" });\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center gap-1 font-medium transition-colors w-fit whitespace-nowrap shrink-0 inline-flex [&>svg]:size-3 [&>svg]:gap-1 [&>svg]:pointer-events-none focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 aria-invalid:ring-destructive/20 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        solid: \"border-transparent\",\n        outline: \"border\",\n        ghost: \"border\",\n      },\n      color: {\n        white: \"\",\n        neutral: \"\",\n        indigo: \"\",\n        blue: \"\",\n        red: \"\",\n        pink: \"\",\n        orange: \"\",\n        yellow: \"\",\n        green: \"\",\n        teal: \"\",\n        purple: \"\",\n      },\n      size: {\n        sm: \"text-xs rounded-full px-2 py-0.5 h-6\",\n        md: \"text-sm rounded-full px-3 py-1 h-7\",\n      },\n    },\n    compoundVariants: [\n      // Solid variants\n      {\n        variant: \"solid\",\n        color: \"white\",\n        className: \"bg-neutral-100 text-neutral-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"neutral\",\n        className: \"bg-neutral-200/90 text-neutral-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"indigo\",\n        className: \"bg-indigo-200 text-indigo-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"blue\",\n        className: \"bg-blue-200 text-blue-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"red\",\n        className: \"bg-red-200 text-red-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"pink\",\n        className: \"bg-pink-200 text-pink-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"orange\",\n        className: \"bg-orange-200 text-orange-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"yellow\",\n        className: \"bg-amber-200 text-amber-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"green\",\n        className: \"bg-green-200 text-green-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"teal\",\n        className: \"bg-teal-200 text-teal-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"purple\",\n        className: \"bg-purple-200 text-purple-800\"\n      },\n      \n      // Outline variants\n      {\n        variant: \"outline\",\n        color: \"white\",\n        className: \"border-neutral-300 bg-neutral-50/90 text-neutral-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"neutral\",\n        className: \"border-neutral-300 bg-neutral-50 text-neutral-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"indigo\",\n        className: \"border-indigo-300 bg-indigo-50 text-indigo-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"blue\",\n        className: \"border-blue-300 bg-blue-50 text-blue-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"red\",\n        className: \"border-red-300 bg-red-50 text-red-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"pink\",\n        className: \"border-pink-300 bg-pink-50 text-pink-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"orange\",\n        className: \"border-orange-300 bg-orange-50 text-orange-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"yellow\",\n        className: \"border-amber-300 bg-amber-50 text-amber-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"green\",\n        className: \"border-green-300 bg-green-50 text-green-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"teal\",\n        className: \"border-teal-300 bg-teal-50 text-teal-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"purple\",\n        className: \"border-purple-300 bg-purple-50 text-purple-800\"\n      },\n      \n      // Ghost variants\n      {\n        variant: \"ghost\",\n        color: \"white\",\n        className: \"border-neutral-100 bg-transparent text-neutral-700\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"neutral\",\n        className: \"border-neutral-300 bg-transparent text-neutral-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"indigo\",\n        className: \"border-indigo-300 bg-transparent text-indigo-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"blue\",\n        className: \"border-blue-300 bg-transparent text-blue-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"red\",\n        className: \"border-red-300 bg-transparent text-red-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"pink\",\n        className: \"border-pink-300 bg-transparent text-pink-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"orange\",\n        className: \"border-orange-300 bg-transparent text-orange-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"yellow\",\n        className: \"border-amber-300 bg-transparent text-amber-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"green\",\n        className: \"border-green-300 bg-transparent text-green-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"teal\",\n        className: \"border-teal-300 bg-transparent text-teal-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"purple\",\n        className: \"border-purple-300 bg-transparent text-purple-800\"\n      },\n    ],\n    defaultVariants: {\n      variant: \"solid\",\n      color: \"neutral\",\n      size: \"sm\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, \"color\">,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n}\n\nfunction Badge({\n  className,\n  variant,\n  color,\n  size = \"sm\", // Default size\n  asChild = false,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : \"span\";\n\n  // Ensure size is always \"sm\" or \"md\"\n  const validSize = size === \"sm\" || size === \"md\" ? size : \"sm\";\n\n  return (\n    <BadgeContext.Provider value={{ size: validSize }}>\n      <Comp\n        data-slot=\"badge\"\n        className={cn(\n          badgeVariants({\n            variant,\n            color,\n            size: validSize,\n          }),\n          className\n        )}\n        {...props}\n      />\n    </BadgeContext.Provider>\n  );\n}\n\n// Icon badge\nconst BadgeIcon = ({\n  children,\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & {\n  children: React.ReactElement<React.SVGProps<SVGSVGElement>>;\n}) => {\n  const { size } = useContext(BadgeContext); // Get size from context\n  const sizeClasses = size === \"sm\" ? \"w-3 h-3\" : \"!w-4 !h-4\"; // Adjust size based on Badge size\n\n  return (\n    <span\n      className={cn(\n        \"inline-block\", // Container styling\n        sizeClasses, // Apply size to container\n        className\n      )}\n      {...props}\n    >\n      {React.isValidElement(children) &&\n        React.cloneElement(children, {\n          className: cn(sizeClasses, children.props.className), // Apply size to <svg>\n        })}\n    </span>\n  );\n};\n\n// Dot indicator\nconst BadgeDot = ({\n  className,\n  color = \"neutral\",\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & {\n  color?: string;\n}) => {\n  const dotColor = \n    color === \"neutral\" ? \"bg-neutral-700\" :\n    color === \"blue\" ? \"bg-blue-700\" :\n    color === \"indigo\" ? \"bg-indigo-800\" :\n    color === \"red\" ? \"bg-red-700\" :\n    color === \"pink\" ? \"bg-pink-700\" :\n    color === \"orange\" ? \"bg-orange-700\" :\n    color === \"yellow\" ? \"bg-amber-700\" :\n    color === \"green\" ? \"bg-green-700\" :\n    color === \"teal\" ? \"bg-teal-700\" :\n    color === \"purple\" ? \"bg-purple-700\":\n    \"bg-neutral-700\";\n  return (\n    <span\n      className={cn(\n        \"inline-block rounded-full w-1.5 h-1.5\",\n        dotColor,\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\n// Avatar component for badge\nconst BadgeAvatar = ({\n  src,\n  alt = \"Avatar\",\n  size = \"sm\",\n  className,\n  ...props\n}: React.ImgHTMLAttributes<HTMLImageElement> & {\n  size?: \"sm\" | \"md\";\n}) => {\n  return (\n    <span className=\"flex\">\n      <img \n        src={src}\n        alt={alt}\n        className={cn(\n          \"rounded-full object-cover\",\n          size === \"sm\" ? \"w-4 h-4\" : \"w-5 h-5\",\n          className\n        )}\n        {...props}\n      />\n    </span>\n  );\n};\n\n// Close button for badge\nconst BadgeClose = ({\n  size = \"sm\",\n  onClick,\n  className,\n  ...props\n}: React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  size?: \"sm\" | \"md\";\n}) => {\n  return (\n    <button \n      onClick={(e) => {\n        e.stopPropagation();\n        onClick?.(e);\n      }}\n      className={cn(\n        \"rounded-full hover:bg-neutral-200 flex items-center justify-center w-4 h-4\",\n        className\n      )}\n      {...props}\n    >\n      <X className={\"w-4 h-4\"} />\n    </button>\n  );\n};\n\nBadge.Icon = BadgeIcon;\nBadge.Dot = BadgeDot;\nBadge.Avatar = BadgeAvatar;\nBadge.Close = BadgeClose;\n\nexport { Badge, badgeVariants };",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    },
    {
      "path": "src/components/ui/button.tsx",
      "content": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-lg font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-auto shrink-0 [&_svg]:shrink-0 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-ring/90 aria-invalid:ring-destructive/20\",\n\n  {\n    variants: {\n      variant: {\n        default:\n        \"bg-indigo-600 text-primary-foreground hover:bg-indigo-700 focus-visible:ring-indigo-600/60\",\n\n        secondaryBrand:\n        \"bg-indigo-50 text-primary hover:bg-indigo-100\",\n\n        secondary:\n        \"bg-secondary text-secondary-foreground hover:bg-gray-300\",\n\n        outlineBrand:\n        \"border border-indigo-300 text-primary hover:bg-indigo-100\",\n\n        outline:\n        \"border border-neutral-600/20 bg-transparent text-secondary-foreground hover:bg-gray-200/50 \",\n\n        destructive:\n        \"bg-destructive text-white hover:bg-red-800 focus-visible:ring-destructive/60\",\n\n        destructiveOutline:\n        \"border border-red-300 text-destructive hover:bg-red-50 focus-visible:ring-destructive/60\",\n\n        success:\n        \"bg-success text-white hover:bg-green-800 focus-visible:ring-success/60\",\n\n        successOutline:\n        \"border border-green-300 text-success hover:bg-green-50 focus-visible:ring-success/60\",\n\n        ghost:\n        \" text-secondary-foreground hover:bg-accent hover:bg-gray-200/50 \",\n\n        link: \"text-primary underline-offset-4 hover:underline p-0 h-auto\",\n      },\n      size: {\n        md: \"h-10 px-4 py-2 [&_svg:not([class*='size-'])]:size-5\",\n        sm: \"h-9 px-3 py-1.5 text-xs gap-1.5 [&_svg:not([class*='size-'])]:size-4\",\n        lg: \"h-12 px-5 py-2.5 text-base [&_svg:not([class*='size-'])]:size-5\",\n        \"icon-sm\": \"size-9 p-0 [&_svg:not([class*='size-'])]:size-4\", // 36x36 with 16px icon\n        \"icon-md\": \"size-10 p-0 [&_svg:not([class*='size-'])]:size-5\", // 40x40 with 20px icon\n        \"icon-lg\": \"size-12 p-0 [&_svg:not([class*='size-'])]:size-5\", // 48x48 with 20px icon\n      },\n      iconPosition: {\n        left: \"flex-row\",\n        right: \"flex-row\",\n      },\n      fullWidth: {\n        true: \"w-full\",\n      },\n      // New variants for handling icon padding\n      hasStartIcon: {\n        true: \"\",\n      },\n      hasEndIcon: {\n        true: \"\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"md\",\n      iconPosition: \"left\",\n      fullWidth: false,\n      hasStartIcon: false,\n      hasEndIcon: false,\n    },\n    compoundVariants: [\n      // Adjust spacing when icons are present\n      {\n        iconPosition: \"left\",\n        size: \"sm\",\n        class: \"gap-1\", // 4px\n      },\n      {\n        iconPosition: \"right\",\n        size: \"sm\",\n        class: \"gap-1\", // 4px\n      },\n      {\n        iconPosition: \"left\",\n        size: \"md\",\n        class: \"gap-1\", // 4px\n      },\n      {\n        iconPosition: \"right\",\n        size: \"md\",\n        class: \"gap-1\", // 4px\n      },\n      {\n        iconPosition: \"left\",\n        size: \"lg\",\n        class: \"gap-1.5\", // 6px\n      },\n      {\n        iconPosition: \"right\",\n        size: \"lg\",\n        class: \"gap-1.5\", // 6px\n      },\n      \n      // Adjust padding for buttons with icons\n      // Small button with start icon (reduced left padding)\n      {\n        size: \"sm\",\n        hasStartIcon: true,\n        class: \"pl-2.5 pr-3\", // 10px left, 12px right\n      },\n      // Small button with end icon (reduced right padding)\n      {\n        size: \"sm\",\n        hasEndIcon: true,\n        class: \"pl-3 pr-2.5\", // 12px left, 10px right\n      },\n      // Medium button with start icon (reduced left padding)\n      {\n        size: \"md\",\n        hasStartIcon: true,\n        class: \"pl-3.5 pr-4\", // 14px left, 16px right\n      },\n      // Medium button with end icon (reduced right padding)\n      {\n        size: \"md\",\n        hasEndIcon: true,\n        class: \"pl-4 pr-3.5\", // 16px left, 14px right\n      },\n      // Large button with start icon (reduced left padding)\n      {\n        size: \"lg\",\n        hasStartIcon: true,\n        class: \"pl-4 pr-5\", // 16px left, 20px right\n      },\n      // Large button with end icon (reduced right padding)\n      {\n        size: \"lg\",\n        hasEndIcon: true,\n        class: \"pl-5 pr-4\", // 20px left, 16px right\n      },\n      // Handle both start and end icons\n      {\n        hasStartIcon: true,\n        hasEndIcon: true,\n        size: \"sm\",\n        class: \"pl-2.5 pr-2.5\", // 10px both sides\n      },\n      {\n        hasStartIcon: true,\n        hasEndIcon: true,\n        size: \"md\",\n        class: \"pl-3.5 pr-3.5\", // 14px both sides\n      },\n      {\n        hasStartIcon: true,\n        hasEndIcon: true,\n        size: \"lg\",\n        class: \"pl-4 pr-4\", // 16px both sides\n      },\n      // Link variant with icons should have appropriate spacing but no padding/height\n      {\n        variant: \"link\",\n        hasStartIcon: true,\n        class: \"gap-1.5 p-0 h-auto\",\n      },\n      {\n        variant: \"link\",\n        hasEndIcon: true,\n        class: \"gap-1.5 p-0 h-auto\",\n      },\n    ],\n  }\n);\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean;\n  startIcon?: React.ReactNode;\n  endIcon?: React.ReactNode;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    {\n      className,\n      variant,\n      size,\n      fullWidth,\n      asChild = false,\n      startIcon,\n      endIcon,\n      children,\n      iconPosition: iconPositionProp,\n      ...props // Destructure props to exclude startIcon and endIcon\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    // Fix the icon position logic\n    const iconPosition = iconPositionProp || (endIcon && !startIcon ? \"right\" : \"left\");\n\n    const hasStartIcon = Boolean(startIcon);\n    const hasEndIcon = Boolean(endIcon);\n    const isIconOnly = !children && (hasStartIcon || hasEndIcon);\n    const isLink = variant === \"link\";\n\n    // Automatically select icon size variant if it's an icon-only button\n    let effectiveSize = size;\n    if (isIconOnly && !String(size).startsWith(\"icon-\") && !isLink) {\n      if (size === \"sm\") effectiveSize = \"icon-sm\";\n      else if (size === \"lg\") effectiveSize = \"icon-lg\";\n      else effectiveSize = \"icon-md\"; // Default to medium if unspecified\n    }\n\n    return (\n      <Comp\n        className={cn(\n          buttonVariants({\n            variant,\n            size: effectiveSize,\n            fullWidth,\n            iconPosition,\n            hasStartIcon: !isIconOnly && hasStartIcon,\n            hasEndIcon: !isIconOnly && hasEndIcon,\n            className,\n          })\n        )}\n        ref={ref}\n        {...props} // Spread remaining props (excluding startIcon and endIcon)\n      >\n        {isIconOnly ? (\n          <span className=\"flex items-center justify-center\">\n            {startIcon || endIcon}\n          </span>\n        ) : (\n          <>\n            {iconPosition === \"left\" && hasStartIcon && (\n              <span className=\"shrink-0\">{startIcon}</span>\n            )}\n            {children}\n            {iconPosition === \"right\" && hasEndIcon && (\n              <span className=\"shrink-0\">{endIcon}</span>\n            )}\n          </>\n        )}\n      </Comp>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/checkbox.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { CheckIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction Checkbox({\n  className,\n  ...props\n}: React.ComponentProps<typeof CheckboxPrimitive.Root>) {\n  return (\n    <CheckboxPrimitive.Root\n      data-slot=\"checkbox\"\n      className={cn(\n        \"peer border-input data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground data-[state=checked]:border-primary focus-visible:border-ring focus-visible:ring-ring/50 aria-invalid:ring-destructive/20 aria-invalid:border-destructive size-4 shrink-0 rounded-[4px] border-2 shadow-xs transition-shadow outline-none focus-visible:ring-[3px] disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <CheckboxPrimitive.Indicator\n        data-slot=\"checkbox-indicator\"\n        className=\"flex items-center justify-center text-current transition-none\"\n      >\n        <CheckIcon className=\"size-3\" strokeWidth={3.5} />\n      </CheckboxPrimitive.Indicator>\n    </CheckboxPrimitive.Root>\n  )\n}\n\nexport { Checkbox }\n",
      "type": "registry:ui",
      "target": ""
    },
    {
      "path": "src/components/ui/dropdown-menu.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { CheckIcon, ChevronRightIcon, CircleIcon } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction DropdownMenu({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Root>) {\n  return <DropdownMenuPrimitive.Root data-slot=\"dropdown-menu\" {...props} />\n}\n\nfunction DropdownMenuPortal({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Portal>) {\n  return (\n    <DropdownMenuPrimitive.Portal data-slot=\"dropdown-menu-portal\" {...props} />\n  )\n}\n\nfunction DropdownMenuTrigger({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Trigger>) {\n  return (\n    <DropdownMenuPrimitive.Trigger\n      data-slot=\"dropdown-menu-trigger\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuContent({\n  className,\n  sideOffset = 4,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Content>) {\n  return (\n    <DropdownMenuPrimitive.Portal>\n      <DropdownMenuPrimitive.Content\n        data-slot=\"dropdown-menu-content\"\n        sideOffset={sideOffset}\n        className={cn(\n          \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 max-h-(--radix-dropdown-menu-content-available-height) min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-x-hidden overflow-y-auto  rounded-lg border p-1 shadow-md\",\n          className\n        )}\n        {...props}\n      />\n    </DropdownMenuPrimitive.Portal>\n  )\n}\n\nfunction DropdownMenuGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Group>) {\n  return (\n    <DropdownMenuPrimitive.Group data-slot=\"dropdown-menu-group\" {...props} />\n  )\n}\n\nfunction DropdownMenuItem({\n  className,\n  inset,\n  variant = \"default\",\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Item> & {\n  inset?: boolean\n  variant?: \"default\" | \"destructive\"\n}) {\n  return (\n    <DropdownMenuPrimitive.Item\n      data-slot=\"dropdown-menu-item\"\n      data-inset={inset}\n      data-variant={variant}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[variant=destructive]:text-destructive data-[variant=destructive]:focus:bg-destructive/10 data-[variant=destructive]:focus:text-destructive data-[variant=destructive]:*:[svg]:!text-destructive [&_svg:not([class*='text-'])]:text-muted-foreground relative flex cursor-default items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 data-[inset]:pl-8 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuCheckboxItem({\n  className,\n  children,\n  checked,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.CheckboxItem>) {\n  return (\n    <DropdownMenuPrimitive.CheckboxItem\n      data-slot=\"dropdown-menu-checkbox-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      checked={checked}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CheckIcon className=\"size-4\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.CheckboxItem>\n  )\n}\n\nfunction DropdownMenuRadioGroup({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioGroup>) {\n  return (\n    <DropdownMenuPrimitive.RadioGroup\n      data-slot=\"dropdown-menu-radio-group\"\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuRadioItem({\n  className,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.RadioItem>) {\n  return (\n    <DropdownMenuPrimitive.RadioItem\n      data-slot=\"dropdown-menu-radio-item\"\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground relative flex cursor-default items-center gap-2 rounded-sm py-1.5 pr-2 pl-8 text-sm outline-hidden select-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:shrink-0 [&_svg:not([class*='size-'])]:size-4\",\n        className\n      )}\n      {...props}\n    >\n      <span className=\"pointer-events-none absolute left-2 flex size-3.5 items-center justify-center\">\n        <DropdownMenuPrimitive.ItemIndicator>\n          <CircleIcon className=\"size-2 fill-current\" />\n        </DropdownMenuPrimitive.ItemIndicator>\n      </span>\n      {children}\n    </DropdownMenuPrimitive.RadioItem>\n  )\n}\n\nfunction DropdownMenuLabel({\n  className,\n  inset,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Label> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.Label\n      data-slot=\"dropdown-menu-label\"\n      data-inset={inset}\n      className={cn(\n        \"px-2 py-1.5 text-sm font-medium data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Separator>) {\n  return (\n    <DropdownMenuPrimitive.Separator\n      data-slot=\"dropdown-menu-separator\"\n      className={cn(\"bg-border -mx-1 my-1 h-px\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuShortcut({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) {\n  return (\n    <span\n      data-slot=\"dropdown-menu-shortcut\"\n      className={cn(\n        \"text-muted-foreground ml-auto text-xs tracking-widest\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction DropdownMenuSub({\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.Sub>) {\n  return <DropdownMenuPrimitive.Sub data-slot=\"dropdown-menu-sub\" {...props} />\n}\n\nfunction DropdownMenuSubTrigger({\n  className,\n  inset,\n  children,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubTrigger> & {\n  inset?: boolean\n}) {\n  return (\n    <DropdownMenuPrimitive.SubTrigger\n      data-slot=\"dropdown-menu-sub-trigger\"\n      data-inset={inset}\n      className={cn(\n        \"focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground flex cursor-default items-center rounded-sm px-2 py-1.5 text-sm outline-hidden select-none data-[inset]:pl-8\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronRightIcon className=\"ml-auto size-4\" />\n    </DropdownMenuPrimitive.SubTrigger>\n  )\n}\n\nfunction DropdownMenuSubContent({\n  className,\n  ...props\n}: React.ComponentProps<typeof DropdownMenuPrimitive.SubContent>) {\n  return (\n    <DropdownMenuPrimitive.SubContent\n      data-slot=\"dropdown-menu-sub-content\"\n      className={cn(\n        \"bg-popover text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 z-50 min-w-[8rem] origin-(--radix-dropdown-menu-content-transform-origin) overflow-hidden  rounded-lg border p-1 shadow-lg\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  DropdownMenu,\n  DropdownMenuPortal,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuLabel,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuSub,\n  DropdownMenuSubTrigger,\n  DropdownMenuSubContent,\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ]
}