{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "badge",
  "type": "registry:ui",
  "title": "Custom Badge",
  "author": "Actabl Design",
  "description": "A customizable badge component with support for variants, sizes, icons, dots, avatars, and close buttons.",
  "dependencies": [
    "lucide-react",
    "class-variance-authority",
    "react",
    "@radix-ui/react-slot",
    "lucide-react",
    "class-variance-authority",
    "clsx",
    "tailwind-merge",
    "@radix-ui/react-slot"
  ],
  "registryDependencies": [
    "utils"
  ],
  "files": [
    {
      "path": "src/registry/bellhop/components/ui/badge.tsx",
      "content": "\"use client\";\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React, { createContext, useContext } from \"react\";\n\nimport { X } from \"lucide-react\";\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport { cn } from \"@/lib/utils\";\nimport { Slot } from \"@radix-ui/react-slot\";\n\nconst BadgeContext = createContext<{ size: \"sm\" | \"md\" }>({ size: \"sm\" });\n\nconst badgeVariants = cva(\n  \"inline-flex items-center justify-center gap-1 font-medium transition-colors w-fit whitespace-nowrap shrink-0 inline-flex [&>svg]:size-3 [&>svg]:gap-1 [&>svg]:pointer-events-none focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 aria-invalid:ring-destructive/20 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden\",\n  {\n    variants: {\n      variant: {\n        solid: \"border-transparent\",\n        outline: \"border\",\n        ghost: \"border\",\n      },\n      color: {\n        white: \"\",\n        neutral: \"\",\n        indigo: \"\",\n        blue: \"\",\n        red: \"\",\n        pink: \"\",\n        orange: \"\",\n        yellow: \"\",\n        green: \"\",\n        teal: \"\",\n        purple: \"\",\n      },\n      size: {\n        sm: \"text-xs rounded-full px-2 py-0.5 h-6\",\n        md: \"text-sm rounded-full px-3 py-1 h-7\",\n      },\n    },\n    compoundVariants: [\n      // Solid variants\n      {\n        variant: \"solid\",\n        color: \"white\",\n        className: \"bg-neutral-100 text-neutral-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"neutral\",\n        className: \"bg-neutral-200/90 text-neutral-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"indigo\",\n        className: \"bg-indigo-200 text-indigo-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"blue\",\n        className: \"bg-blue-200 text-blue-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"red\",\n        className: \"bg-red-200 text-red-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"pink\",\n        className: \"bg-pink-200 text-pink-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"orange\",\n        className: \"bg-orange-200 text-orange-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"yellow\",\n        className: \"bg-amber-200 text-amber-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"green\",\n        className: \"bg-green-200 text-green-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"teal\",\n        className: \"bg-teal-200 text-teal-800\"\n      },\n      {\n        variant: \"solid\",\n        color: \"purple\",\n        className: \"bg-purple-200 text-purple-800\"\n      },\n      \n      // Outline variants\n      {\n        variant: \"outline\",\n        color: \"white\",\n        className: \"border-neutral-300 bg-neutral-50/90 text-neutral-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"neutral\",\n        className: \"border-neutral-300 bg-neutral-50 text-neutral-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"indigo\",\n        className: \"border-indigo-300 bg-indigo-50 text-indigo-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"blue\",\n        className: \"border-blue-300 bg-blue-50 text-blue-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"red\",\n        className: \"border-red-300 bg-red-50 text-red-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"pink\",\n        className: \"border-pink-300 bg-pink-50 text-pink-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"orange\",\n        className: \"border-orange-300 bg-orange-50 text-orange-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"yellow\",\n        className: \"border-amber-300 bg-amber-50 text-amber-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"green\",\n        className: \"border-green-300 bg-green-50 text-green-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"teal\",\n        className: \"border-teal-300 bg-teal-50 text-teal-800\"\n      },\n      {\n        variant: \"outline\",\n        color: \"purple\",\n        className: \"border-purple-300 bg-purple-50 text-purple-800\"\n      },\n      \n      // Ghost variants\n      {\n        variant: \"ghost\",\n        color: \"white\",\n        className: \"border-neutral-100 bg-transparent text-neutral-700\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"neutral\",\n        className: \"border-neutral-300 bg-transparent text-neutral-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"indigo\",\n        className: \"border-indigo-300 bg-transparent text-indigo-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"blue\",\n        className: \"border-blue-300 bg-transparent text-blue-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"red\",\n        className: \"border-red-300 bg-transparent text-red-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"pink\",\n        className: \"border-pink-300 bg-transparent text-pink-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"orange\",\n        className: \"border-orange-300 bg-transparent text-orange-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"yellow\",\n        className: \"border-amber-300 bg-transparent text-amber-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"green\",\n        className: \"border-green-300 bg-transparent text-green-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"teal\",\n        className: \"border-teal-300 bg-transparent text-teal-800\"\n      },\n      {\n        variant: \"ghost\",\n        color: \"purple\",\n        className: \"border-purple-300 bg-transparent text-purple-800\"\n      },\n    ],\n    defaultVariants: {\n      variant: \"solid\",\n      color: \"neutral\",\n      size: \"sm\",\n    },\n  }\n);\n\nexport interface BadgeProps\n  extends Omit<React.HTMLAttributes<HTMLElement>, \"color\">,\n    VariantProps<typeof badgeVariants> {\n  asChild?: boolean;\n}\n\nfunction Badge({\n  className,\n  variant,\n  color,\n  size = \"sm\", // Default size\n  asChild = false,\n  ...props\n}: BadgeProps) {\n  const Comp = asChild ? Slot : \"span\";\n\n  // Ensure size is always \"sm\" or \"md\"\n  const validSize = size === \"sm\" || size === \"md\" ? size : \"sm\";\n\n  return (\n    <BadgeContext.Provider value={{ size: validSize }}>\n      <Comp\n        data-slot=\"badge\"\n        className={cn(\n          badgeVariants({\n            variant,\n            color,\n            size: validSize,\n          }),\n          className\n        )}\n        {...props}\n      />\n    </BadgeContext.Provider>\n  );\n}\n\n// Icon badge\nconst BadgeIcon = ({\n  children,\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & {\n  children: React.ReactElement<React.SVGProps<SVGSVGElement>>;\n}) => {\n  const { size } = useContext(BadgeContext); // Get size from context\n  const sizeClasses = size === \"sm\" ? \"w-3 h-3\" : \"!w-4 !h-4\"; // Adjust size based on Badge size\n\n  return (\n    <span\n      className={cn(\n        \"inline-block\", // Container styling\n        sizeClasses, // Apply size to container\n        className\n      )}\n      {...props}\n    >\n      {React.isValidElement(children) &&\n        React.cloneElement(children, {\n          className: cn(sizeClasses, children.props.className), // Apply size to <svg>\n        })}\n    </span>\n  );\n};\n\n// Dot indicator\nconst BadgeDot = ({\n  className,\n  color = \"neutral\",\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement> & {\n  color?: string;\n}) => {\n  const dotColor = \n    color === \"neutral\" ? \"bg-neutral-700\" :\n    color === \"blue\" ? \"bg-blue-700\" :\n    color === \"indigo\" ? \"bg-indigo-800\" :\n    color === \"red\" ? \"bg-red-700\" :\n    color === \"pink\" ? \"bg-pink-700\" :\n    color === \"orange\" ? \"bg-orange-700\" :\n    color === \"yellow\" ? \"bg-amber-700\" :\n    color === \"green\" ? \"bg-green-700\" :\n    color === \"teal\" ? \"bg-teal-700\" :\n    color === \"purple\" ? \"bg-purple-700\":\n    \"bg-neutral-700\";\n  return (\n    <span\n      className={cn(\n        \"inline-block rounded-full w-1.5 h-1.5\",\n        dotColor,\n        className\n      )}\n      {...props}\n    />\n  );\n};\n\n// Avatar component for badge\nconst BadgeAvatar = ({\n  src,\n  alt = \"Avatar\",\n  size = \"sm\",\n  className,\n  ...props\n}: React.ImgHTMLAttributes<HTMLImageElement> & {\n  size?: \"sm\" | \"md\";\n}) => {\n  return (\n    <span className=\"flex\">\n      <img \n        src={src}\n        alt={alt}\n        className={cn(\n          \"rounded-full object-cover\",\n          size === \"sm\" ? \"w-4 h-4\" : \"w-5 h-5\",\n          className\n        )}\n        {...props}\n      />\n    </span>\n  );\n};\n\n// Close button for badge\nconst BadgeClose = ({\n  size = \"sm\",\n  onClick,\n  className,\n  ...props\n}: React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  size?: \"sm\" | \"md\";\n}) => {\n  return (\n    <button \n      onClick={(e) => {\n        e.stopPropagation();\n        onClick?.(e);\n      }}\n      className={cn(\n        \"rounded-full hover:bg-neutral-200 flex items-center justify-center w-4 h-4\",\n        className\n      )}\n      {...props}\n    >\n      <X className={\"w-4 h-4\"} />\n    </button>\n  );\n};\n\nBadge.Icon = BadgeIcon;\nBadge.Dot = BadgeDot;\nBadge.Avatar = BadgeAvatar;\nBadge.Close = BadgeClose;\n\nexport { Badge, badgeVariants };",
      "type": "registry:ui"
    },
    {
      "path": "src/lib/utils.ts",
      "content": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
      "type": "registry:lib",
      "target": ""
    }
  ]
}